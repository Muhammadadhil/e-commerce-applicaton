<%- include('../layouts/header.ejs') -%>
<br />
<!-- <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item">
        <a href="#"><i class="fas fa-home me-1"></i>Home</a>
      </li>
      <li class="breadcrumb-item">
        <a href="#">Library</a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">
        <a href="#">Data</a>
      </li>
    </ol>
  </nav>
   -->
<div class="section section-padding">
    <div class="container">
        <hr />
        <br />
        <div class="row">
            <div class="col-md-6">
                <h3 class="mt-4 text-warning">ORDER DETAILS</h3>
                <br />
                <h4 class="name text-muted">OrderId: <%=orderData._id%></h4>
                <p class="text-muted">
                    <b>Ordered Date:</b>
                    <%=orderData.orderDate.toLocaleDateString('en-US', { weekday: 'short' , year: 'numeric' , month: 'short' , day: 'numeric' })%>
                    <br /><b>Payment Method:</b> <%= orderData.payment %><br />
                    <b>Address:</b>
                    <%= orderData.deliveryAddress.name %>,<%= orderData.deliveryAddress.address %> <br />
                    <b>Shipping:</b><%= orderData.deliveryAddress.pincode %>,<%= orderData.deliveryAddress.city %>
                    <br />
                </p>
            </div>
            <div class="col-md-6 text-end mt-5">
                <p></p>
                <p>
                    Amount after all discount: <br />
                    <b>Order total:</b><%=orderData.subTotal%>
                </p>
                <%if(orderData.orderStatus==='pending' && orderData.subTotal>0){%>
                <div>
                    <button class="btn btn-primary" onclick="payAgain('<%=orderData._id%>')">pay now</button><br />
                    <small>(buy the products which you have choosed)</small>
                </div>
                <%}%>
                <p><b>Order status:</b><%=orderData.orderStatus%></p>
                <%if(orderData.orderStatus==='delivered'){%>
                <a href="/salesInvoice?id=<%=orderData._id%>"><button class="btn btn-secondary">download invoice</button></a>
                <%}%>
            </div>
            <div class="col-md-12">
                <% if (orderData.products.length > 0) { %>
                <h3 class="mb-4 mt-5">Ordered Products</h3>
                <div class="table-responsive">
                    <table class="table" style="border: 1px solid grey">
                        <thead>
                            <tr class="text-center">
                                <th class="no fw-bold">No</th>
                                <th class="date fw-bold">Image</th>
                                <th class="total fw-bold">Amount</th>
                                <th class="payment fw-bold">Details</th>
                                <th class="invoice fw-bold">Status</th>
                                <th class="actions fw-bold">Actions</th>
                            </tr>
                        </thead>
                        <div class="text-center">
                            <% orderData.products.forEach((product, index)=> { %>
                            <tr>
                                <td><%=index+1%></td>
                                <td>
                                    <img src="multer/products/<%= product.productId.images.image1 %>" alt="" class="" style="max-width: 180px" />
                                </td>

                                <td>
                                    <h5 class="product-details"><a href="/product/details?id=<%=product.productId._id%>"> <%= product.productId.name %> </a></h5>
                                </td>
                                <td>
                                    <p class="product-details">
                                        <%= product.productId.categoryId.name %> <br />
                                        Price: ₹<%= product.price %> <br />
                                        Quantity: <%= product.quantity %> <br />
                                        Total: ₹<%= product.totalPrice %> <br />
                                    </p>
                                </td>
                                <td>
                                    <h5 id="reloadPart"><%=product.productStatus%></h5>
                                </td>
                                <td>
                                    <%if(product.productStatus=='delivered'){%>
                                    <h5><a onclick="returnOrder('<%=orderData._id%>','<%= product.productId._id %>')" class="btn" style="background-color: rgb(240, 88, 0)">Return</a></h5>
                                    <%}else if(product.productStatus=='canceled'){%>
                                    <h5><a id="cancelButton" href="/product/details?id=<%=product.productId._id%>" class="btn" style="background-color: rgb(51, 255, 0)">buy again</a></h5>
                                    <%}else if(product.productStatus=='returned'){%>
                                    <p>Product Returned</p>
                                    <%}else{%>
                                    <h5>
                                        <a id="cancelButton" onclick="cancelOrder('<%=orderData._id%>','<%= product.productId._id %>')" class="btn" style="background-color: rgb(255, 208, 0)"
                                            >cancel</a
                                        >
                                    </h5>
                                    <%}%>
                                </td>
                            </tr>
                            <%})%>
                        </div>
                    </table>
                </div>
                <% } %>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    function payAgain(orderId) {
        axios.get(`/paytheAmount?id=${orderId}`).then((response) => {
            if (response.data.createInstance) {
                razorpayPayment(response.data.order);
            }
        });
    }

    function razorpayPayment(order) {
        console.log("pay again: order:", order);

        var options = {
            key: "rzp_test_bHCQ2sAI4219I7",
            amount: order.amount,
            currency: "INR",
            name: "Homiqo",
            description: "Test Transaction",
            image: "https://example.com/your_logo",
            order_id: order.id,
            // "callback_url": "https://eneqd3r9zrjok.x.pipedream.net/",
            handler: function (response) {
                //handler after payment success
                console.log("response:", response);
                verifyPayment(response, order);
            },
            prefill: {
                name: "muhammad adhil",
                email: "aadhi@gmail.com",
                contact: "9000090000",
            },
            notes: {
                address: "Razorpay Corporate Office",
            },
            theme: {
                color: "#f2a100",
            },
        };

        var rzp1 = new Razorpay(options);
        rzp1.on("payment.failed", function (response) {
            alert(response.error.description);
            // window.location.href=`/detailsOrder?id=${order.receipt}`
        });

        rzp1.open();
    }

    function verifyPayment(response, order) {
        fetch("/verifyPayment", {
            method: "POST",
            headers: {
                "content-type": "application/json;charset=utf-8",
            },
            body: JSON.stringify({
                response,
                order,
            }),
        })
            .then((res) => res.json())
            .then((data) => {
                if (data.statusChanged) {
                    window.location.href = `/orderSuccess?id=${data.orderId}`;
                }
            });
    }
</script>

<script>
    async function returnOrder(orderId, productId) {
        const { value: text } = await Swal.fire({
            input: "textarea",
            inputLabel: "Reason for returning product",
            inputPlaceholder: "Type your reason here...",

            inputAttributes: {
                "aria-label": "Type your message here",
            },
            showCancelButton: true,

            preConfirm: (value) => {
                if (!value) {
                    Swal.showValidationMessage("Please enter a reason for cancel.");
                }
                return value;
            },
        });

        if (text) {
            fetch(`/returnProduct?orderId=${orderId}&productId=${productId}&text=${text}`, {
                method: "DELETE",
                headers: {
                    "content-type": "application/json;charset=utf-8",
                },
            })
                .then((res) => res.json())
                .then((data) => {
                    // console.log('data:',data);

                    const updatedProduct = data.updateData.products.find((product) => productId == productId);
                    console.log("updatedProduct:", updatedProduct);
                    Swal.fire({
                        title: "done!",
                        text: "Your amount will be credited to your wallet and we will pick the product within 2 days",
                    }).then(() => {
                        window.location.reload();
                    });
                });
        }
    }

    async function cancelOrder(orderId, productId) {
        Swal.fire({
            text: "if you cancel this may be you dont get this product at this price",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, cancel it",
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/order/${orderId}/${productId}`, {
                    method: "DELETE",
                    headers: {
                        "content-type": "application/json;charset=utf-8",
                    },
                })
                    .then((res) => res.json())
                    .then((data) => {
                        const updatedProduct = data.updateData.products.find((product) => productId == productId);

                        if (data.updateData.payment === "online" && data.updateData.orderStatus == "placed") {
                            Swal.fire({
                                title: "product order canceled",
                                text: "Your amount will be credited to your wallet ",
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: "canceled ",
                                text: "canceled product order",
                            }).then(() => {
                                window.location.reload();
                            });
                        }

                        const statusElement = document.getElementById("reloadPart");
                        statusElement.innerHTML = `<h5 id="reloadPart">${updatedProduct.productStatus}</h5>`;
                    });
            }
        });
    }
</script>
